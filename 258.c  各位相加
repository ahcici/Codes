/*
给定一个非负整数 num，反复将各个位上的数字相加，直到结果为一位数。

示例:

输入: 38
输出: 2 
解释: 各位相加的过程为：3 + 8 = 11, 1 + 1 = 2。 由于 2 是一位数，所以返回 2。

进阶:
你可以不使用循环或者递归，且在 O(1) 时间复杂度内解决这个问题吗？

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/add-digits
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/


//递归（我现在才明白这种方法叫递归？？？！！！）
int addDigits(int num){
    int sum;
    while(num>9)              //num>9即是两位数
    {
        sum=0;
        while(num>0)             //只要n>0就依次取出当前个位上的数相加
        {
            sum+=num%10;
            num/=10;
        }
        num=sum;                 //更改num为各个位上的和sum
    }
    return sum;
}


//找规律，即进阶问题的解决
int addDigits(int num){
    return (num-1)%9+1;            //对于0也适用。任意输入一个数，对9取余就可以得到相应的个位数
}


/*
6666=740*9+6；     6=（6666-1）%9+1；
1223=135*9+8；   8=（1223-1）%9+1；
50=5*9+5；      5=（50-1）%9+1；
0=0*9+0；      0=（0-1）%9+1；
*/
