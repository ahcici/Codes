/*
238. 除自身以外数组的乘积
给你一个长度为 n 的整数数组 nums，其中 n > 1，返回输出数组 output ，其中 output[i] 等于 nums 中除 nums[i] 之外其余各元素的乘积。

 

示例:

输入: [1,2,3,4]
输出: [24,12,8,6]
 

提示：题目数据保证数组之中任意元素的全部前缀元素和后缀（甚至是整个数组）的乘积都在 32 位整数范围内。

说明: 请不要使用除法，且在 O(n) 时间复杂度内完成此题。

进阶：
你可以在常数空间复杂度内完成这个题目吗？（ 出于对空间复杂度分析的目的，输出数组不被视为额外空间。）
*/

//不需要怎么思索，但是效率很低
int* productExceptSelf(int* nums, int numsSize, int* returnSize)
{
    int *output=(int *)malloc(numsSize*sizeof(int));
    *returnSize=numsSize;
    for(int i=0;i<numsSize;i++)
    {
        int mul=1,j;
        for(j=0;j<numsSize;j++)
        {
            if(i==j)
                continue;
            else
                mul*=nums[j];
        }
        output[i]=mul;
    }
    return output;
}
/*
提交时间   提交结果   运行时间    内存消耗    语言
几秒前	   超出时间限制	  N/A	       N/A	      C
*/
//超出时间限制

//左右乘积

int* productExceptSelf(int* nums, int numsSize, int* returnSize)
{
    int *output=(int *)malloc(numsSize*sizeof(int));
    int l[numsSize],r[numsSize];
    *returnSize=numsSize;
    int i,j=0;
    l[0]=1;r[numsSize-1]=1;
    for(i=0;i<numsSize-1;i++)
    {
        int mul=1;
        for(j=i+1;j<numsSize;j++)
        {
            mul*=nums[j];
        }
        r[i]=mul;
    }    
    for(i=1;i<numsSize;i++)
    {
        int mul=1;
        for(j=0;j<i;j++)
        {
            mul*=nums[j];
        }
        l[i]=mul;
    }
    for(i=0;i<numsSize;i++)
        output[i]=l[i]*r[i];
    return output;
}

//超出时间限制

int* productExceptSelf(int* nums, int numsSize, int* returnSize)
{
    int *a=malloc(numsSize*sizeof(int));
    *returnSize=numsSize;
    int i,mul=1;
    for(i=0;i<numsSize;i++)
    {//计算当前元素左边的乘积   0   1   2   3 
        a[i]=mul;           //1   1   2   6
        mul*=nums[i];       //1   2   6   24
    }
    mul=1;
    for(i=numsSize-1;i>=0;i--)
    {//用上一步的计算结果继续计算当前元素右边的乘积
        a[i]=a[i]*mul;          //1*24 1*12 2*4 6*1
        mul*=nums[i];           //     24    12   4   1
    } 
    return a;
}

//通过了，但是用了两次循环
