/*
167. 两数之和 II - 输入有序数组
给定一个已按照升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。

函数应该返回这两个下标值 index1 和 index2，其中 index1 必须小于 index2。

说明:

返回的下标值（index1 和 index2）不是从零开始的。
你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。
示例:

输入: numbers = [2, 7, 11, 15], target = 9
输出: [1,2]
解释: 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。
*/


//和1一样，直接暴力



/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* twoSum(int* numbers, int numbersSize, int target, int* returnSize)
{
    int i,j,flag=0;
    *returnSize=2;//返回数组的大小是2，所以returnsize的值为2
    int *a=(int *)malloc(2*sizeof(int));
    for(i=0;i<numbersSize-1;i++)
    {
        for(j=i+1;j<numbersSize;j++)
        {
            if(numbers[i]+numbers[j]==target)
            {
                flag=1;
                break;
            }
        }
        if(flag==1)
            break;
    }
    a[0]=i+1;
    a[1]=j+1;
    return a;
}

/*
状态：通过
执行用时：712 ms
内存消耗：6.5 MB
提交时间：22 分钟之前
*/



//双指针（我的理解就是用两个标识符来记录头尾下标，向中间迫近，得到target）


int* twoSum(int* numbers, int numbersSize, int target, int* returnSize)
{
    int *ret = malloc(sizeof(int) * 2);
    *returnSize = 2;
    int i = 0;
    int j = numbersSize - 1;
    while(true){
        if (numbers[i] + numbers[j] > target) {
            j--;
        } else if (numbers[i] + numbers[j] < target) {
            i++;
        } else{
            ret[0] = i+1;
            ret[1] = j+1;
            break;
        }
    }
    return ret;
}

/*
执行结果：    通过
显示详情
执行用时：     4 ms, 在所有 C 提交中击败了98.87%的用户
内存消耗：     6.4 MB, 在所有 C 提交中击败了100.00%的用户
*/

相比较，后面这种方法更快捷
