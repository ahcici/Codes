/*
64. 最小路径和
给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。

说明：每次只能向下或者向右移动一步。

示例:

输入:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
输出: 7
解释: 因为路径 1→3→1→1→1 的总和最小。
*/

/*
1.初始化左上角

2.初始化首行首列

3.利用状态转移方程更新各个节点

*/



int minPathSum(int** grid, int gridSize, int* gridColSize)
{
    int i,j,a[gridSize][*gridColSize];
    a[0][0] = grid[0][0];//初始化
    for(i = 1; i < gridSize; i++)//第零列的最小路径和
        a[i][0] = a[i-1][0] + grid[i][0];
    for(i = 1; i < *gridColSize; i++)//第零行的最小路径和
        a[0][i] = a[0][i-1] + grid[0][i];
    for(i = 1;i < gridSize; i++)
        for(j = 1; j < *gridColSize; j++)
            a[i][j] = (a[i-1][j]<a[i][j-1]?a[i-1][j]:a[i][j-1])+grid[i][j];//动态方程
    return a[gridSize-1][*gridColSize-1];
}



/*
1、确定状态方程
我们使用一个二维数组 dp 来存储答案，dp[i][j]的值是从起始点（也就是(0,0)）走到(i, j)的路径数。

2、确定状态转移方程
上面也说到，dp[i][j]的值就是从起始点（也就是(0,0)）走到(i, j)的路径数，那么如何求出这个值，我们就需要确定状态转移方程，我们思考一下，假设我们全都知道dp[i][j]的值，题目中说到，小机器人只能往右或者往下，那么dp[i][j]的值就是第 i 行第 j 列这个格子的上面那个格子的值加上左边那个格子的值，也就是dp[i][j] = dp[i-1][j] + dp[i][j-1]，因为这两个格子都可以走到dp[i][j]这个格子，那么他们的路径数之和就是dp[i][j]的值。

3、确定边界条件
上面说到状态转移方程是dp[i][j] = dp[i-1][j] + dp[i][j-1]，那么当 i == 0 或者 j == 0 的时候会越界，而我们想一下，当 i == 0 或者 j == 0 的时候无外乎就是最上一行或者最左一列，我们在最上一行的路径数只能是一条（因为只能一直往左走），所以 dp[0][j]的值全为 1，同理最左一列的值也是1（因为只能一直往下走），其余的值按照状态转移方程就可以填满了，最后返回最右下角的值（dp[n-1][m-1]）就可以了。

注意：题目中的 n 是行row，而 m 才是列column。

作者：Streetlight
链接：https://leetcode-cn.com/problems/unique-paths/solution/kan-liao-jue-dui-dong-de-dong-tai-gui-hua-by-stree/
来源：力扣（LeetCode）
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
*/
